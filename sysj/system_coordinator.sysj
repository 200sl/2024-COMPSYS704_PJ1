//import run.BottleQueue;

Coordinator(
        //signals from sensors
		input signal bottleAtPos1, bottleAtPos3, bottleAtPos4, bottleAtPos5;
        input signal bottleAtPos2A, bottleAtPos2B, bottleAtPos2C, bottleAtPos2D;

        input signal bottleLeftPos5, bottleFull;
        input signal gripperZAxisLowered, gripperZAxisLifted, gripperTurnHomePos, gripperTurnFinalPos;

        //pos1
        input signal capOnBottleAtPos1;

        //pos2
        input signal pressureCanisterHigh, pressureCanisterLow;

        //pos3
        input signal WPgripped, armAtSourceE;
        output signal lipLoaderEnable;

        //pos 4
        input signal gripperAtTop, gripperAtBtm, gripperClose;
        input signal gripperAt0, gripperAt270;
        input signal bottleClampOpen, bottleClampClose;

        //pos 5
        output signal bottleUnload;

        //signals from controllers
		input Integer signal motConveyeorOnOff;
		input signal rotaryTableTrigger;
        input signal cylPos5ZaxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend, cylClampBottleExtend;
		input Integer signal valveInjectorOnOff, valveInletOnOff;
        input signal dosUnitValueRetract, dosUnitValueExtend;

        input signal rotaryIdle, capperIdle, fillerAIdle, fillerBIdle, fillerCIdle, fillerDIdle;
        output signal capperDoProcess;
        output signal fillerADoProcess, fillerBDoProcess, fillerCDoProcess, fillerDDoProcess;


        //to controller
        output signal move2NextPos;
        output signal doProcess;

        //from GUI
        input boolean signal processEbalbeGUI, updateFilterGUI;

        input String channel GUI;
        input String channel liquidConfigure;
		)
->{

    signal processEnable, processDisable;
    //BottleQueue bottleQueue = new BottleQueue();

    {
        loop
        {
            //pos 1
            await (bottleAtPos1);
            emit move2NextPos;

            //BottleQueue.moveToNext();
            pause;
        }
    }
    ||
    {
        //filler A
        loop
        {
            //pos 2
            await (bottleAtPos2A);
            emit fillerADoProcess;

            await (fillerAIdle);
            emit move2NextPos;

            //BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //filler B
        loop
        {
            //pos 2
            await (bottleAtPos2B);
            emit fillerCDoProcess;

            await (fillerBIdle);
            emit move2NextPos;

            //BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //filler
        loop
        {
            //pos 2
            await (bottleAtPos2C);
            emit fillerCDoProcess;

            await (fillerCIdle);
            emit move2NextPos;

            //BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //filler
        loop
        {
            //pos 2
            await (bottleAtPos2D);
            emit fillerDDoProcess;

            await (fillerDIdle);
            emit move2NextPos;

            //BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //lip loader
        loop
        {
            await (bottleAtPos3);
            emit lipLoaderEnable;

            await (WPgripped);
            await (armAtSourceE);

            emit move2NextPos;

            //BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //capper
        loop
        {
            await (bottleAtPos4);
            emit capperDoProcess;

            await (capperIdle);
            emit move2NextPos;

            //BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //conveyor
        loop
        {
            await (bottleAtPos5);
            await (bottleLeftPos5);
            await (rotaryIdle);

            emit move2NextPos;

            //BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //GUI
        loop
        {
            //TODO

            //if (#updateFilterGUI.equals(boolean, true))
            //{
            //    parse #liquidConfigure TLV
            //}

            //if (#processEbalbeGUI.equals(boolean, true))
            //{
            //    sustain processEnable;
            //}
            //else
            //{
            //    sustain processDisable;
            //}

            pause;
        }
    }
}
