import run.BottleQueue;

Coordinator(
        //signals from sensors
		input signal bottleAtPos1, bottleAtPos2, bottleAtPos3, bottleAtPos4, bottleAtPos5;
        input signal bottleLeftPos5, bottleFull;
        input signal tableAlignedWithSensor;
        input signal gripperZAxisLowered, gripperZAxisLifted, gripperTurnHomePos, gripperTurnFinalPos;


        //pos1
        input signal capOnBottleAtPos1;

        //pos2
        input signal pressureCanisterHigh, pressureCanisterLow;
        output signal dosUnitEvac, dosUnitFilled, dosUnitAtTargetPos;

        //pos3
        input signal WPgripped, armAtSourceE;
        output signal lipLoaderEnable;

        //pos 4
        input signal gripperAtTop, gripperAtBtm, gripperClose;
        input signal gripperAt0, gripperAt270;
        input signal bottleClampOpen, bottleClampClose;

        //pos 5
        output signal bottleUnload;

        //signals from controllers
		input Integer signal motConveyeorOnOff;
		input signal rotaryTableTrigger;
        input signal cylPos5ZaxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend, cylClampBottleExtend;
		input Integer signal valveInjectorOnOff, valveInletOnOff;
        input signal dosUnitValueRetract, dosUnitValueExtend;

        //to controller
        output signal move2NextPos;
        output signal doProcess;

        //from GUI
        input boolean signal processEbalbeGUI, updateFilterGUI;

        input String channel GUI;
        input String channel liquidConfigure;
		)
->{

    signal posReady_1, posReady_2, posReady_4, posReady_5;
    signal processEnable, processDisable;
    BottleQueue bottleQueue = new BottleQueue();

    {
        loop
        {
            //start operation

            //send bottle to pos1

            //fill the bottles

            //place a lid/cap

            //screw and press caps

            //send bottle via converor to next stage

            pause;
        }
    }
    ||
    {
        loop
        {
            //pos 1
            await (bottleAtPos1);
            emit move2NextPos;

            BottleQueue.moveToNext();
            pause;
        }
    }
    ||
    {
        //filler
        loop
        {
            //pos 2
            await (bottleAtPos2);
            emit doProcess;

            await (valveInjectorOnOff);
            emit move2NextPos;

            BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //lip loader
        loop
        {
            await (bottleAtPos3);
            emit lipLoaderEnable;

            await (WPgripped);
            await (armAtSourceE);
            emit move2NextPos;

            BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //capper
        loop
        {
            await (bottleAtPos4);
            emit doProcess;

            await (gripperTurnRetract);
            await (capGripperPos5Extend);

            emit move2NextPos;

            BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //conveyor
        loop
        {
            await (bottleAtPos5);
            await (bottleLeftPos5);

            emit bottleUnload;
            emit move2NextPos;

            BottleQueue.moveToNext();

            pause;
        }
    }
    ||
    {
        //GUI
        loop
        {
            if (#updateFilterGUI.equals(Boolean, true))
            {
                //TODO
                //parse #liquidConfigure TLV
            }

            if (#processEbalbeGUI.equals(Boolean, true))
            {
                sustain processEnable;
            }
            else
            {
                sustain processDisable;
            }

            pause;
        }
    }
}
